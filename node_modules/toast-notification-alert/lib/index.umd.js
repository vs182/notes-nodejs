!function(t,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n();else if("function"==typeof define&&define.amd)define([],n);else{var e=n();for(var o in e)("object"==typeof exports?exports:t)[o]=e[o]}}(window,(function(){return function(t){var n={};function e(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}return e.m=t,e.c=n,e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:o})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)e.d(o,r,function(n){return t[n]}.bind(null,r));return o},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";e.r(n),e.d(n,"toast",(function(){return l}));var o={tapToDismiss:!0,toastClass:"toast",containerId:"igho-toast-container",debug:!1,showMethod:"fadeIn",showDuration:300,showEasing:"swing",hideMethod:"fadeOut",hideDuration:1e3,hideEasing:"swing",closeMethod:!1,closeDuration:!1,closeEasing:!1,closeOnHover:!0,extendedTimeOut:1e3,iconClasses:{error:"error",info:"info",success:"success",warning:"warning",alert:"alert"},iconClass:"info",position:"topleft",timeOut:5e3,titleClass:"toast-title",messageClass:"toast-message",escapeHtml:!1,target:"body",closeHtml:'<button type="button">&times;</button>',closeClass:"toast-close-button",newestOnTop:!0,preventDuplicates:!1,progressBar:!1,progressClass:"toast-progress",rtl:!1};function r(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,o)}return e}function i(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?r(Object(e),!0).forEach((function(n){a(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):r(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}var s=document.createElement("style");s.innerHTML='\n.toast-title {\n    font-weight: bold;\n}\n.toast-message {\n    -ms-word-wrap: break-word;\n    word-wrap: break-word;\n}\n.toast-message a,\n.toast-message label {\n    color: #FFFFFF;\n}\n.toast-message a:hover {\n    color: #CCCCCC;\n    text-decoration: none;\n}\n.toast-close-button {\n    position: relative;\n    right: -0.3em;\n    top: -0.3em;\n    float: right;\n    font-size: 20px;\n    font-weight: bold;\n    color: #FFFFFF;\n    -webkit-text-shadow: 0 1px 0 #ffffff;\n    text-shadow: 0 1px 0 #ffffff;\n    opacity: 0.8;\n    -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=80);\n    filter: alpha(opacity=80);\n    line-height: 1;\n}\n.toast-close-button:hover,\n.toast-close-button:focus {\n    color: #000000;\n    text-decoration: none;\n    cursor: pointer;\n    opacity: 0.4;\n    -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=40);\n    filter: alpha(opacity=40);\n}\n.rtl .toast-close-button {\n    left: -0.3em;\n    float: left;\n    right: 0.3em;\n}\n/*Additional properties for button version\n iOS requires the button element instead of an anchor tag.\n If you want the anchor version, it requires `href="#"`.*/\nbutton.toast-close-button {\n    padding: 0;\n    cursor: pointer;\n    background: transparent;\n    border: 0;\n    -webkit-appearance: none;\n}\n.topcenter {\n    top: 0;\n    right: 0;\n    width: 100%;\n    align-items: center;\n    display: flex;\n        flex-direction: column;\n         width: 300px;\n}\n.bottomcenter {\n    bottom: 0;\n    right: 0;\n    width: 100%;\n     align-items: center;\n    display: flex;\n        flex-direction: column;\n         width: 300px;\n}\n.topfullwidth {\n    top: 0;\n    right: 0;\n    width: 100%;\n}\n.bottomfullwidth {\n    bottom: 0;\n    right: 0;\n    width: 100%;\n}\n.topleft {\n    top: 12px;\n    left: 12px;\n     width: 300px;\n}\n.topright {\n    top: 12px;\n    right: 12px;\n     width: 300px;\n}\n.bottomright {\n    right: 12px;\n    bottom: 12px;\n     width: 300px;\n}\n.bottomleft {\n    bottom: 12px;\n    left: 12px;\n     width: 300px;\n}\n#igho-toast-container {\n    position: fixed;\n    z-index: 999999;\n    pointer-events: none;\n    /*overrides*/\n}\n#igho-toast-container * {\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n}\n#igho-toast-container > div {\n    position: relative;\n    pointer-events: auto;\n    overflow: hidden;\n    margin: 0 0 6px;\n    padding: 15px 15px 15px 50px;\n   \n    -moz-border-radius: 3px 3px 3px 3px;\n    -webkit-border-radius: 3px 3px 3px 3px;\n    border-radius: 3px 3px 3px 3px;\n    background-position: 15px center;\n    background-repeat: no-repeat;\n    -moz-box-shadow: 0 0 12px #999999;\n    -webkit-box-shadow: 0 0 12px #999999;\n    box-shadow: 0 0 12px #999999;\n    color: #FFFFFF;\n    opacity: 0.8;\n    -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=80);\n    filter: alpha(opacity=80);\n}\n#igho-toast-container > div.rtl {\n    direction: rtl;\n    padding: 15px 50px 15px 15px;\n    background-position: right 15px center;\n}\n#igho-toast-container > div:hover {\n    -moz-box-shadow: 0 0 12px #000000;\n    -webkit-box-shadow: 0 0 12px #000000;\n    box-shadow: 0 0 12px #000000;\n    opacity: 1;\n    -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100);\n    filter: alpha(opacity=100);\n    cursor: pointer;\n}\n\n#igho-toast-container.toast-top-center > div,\n#igho-toast-container.toast-bottom-center > div {\n    width: 300px;\n    margin-left: auto;\n    margin-right: auto;\n}\n#igho-toast-container.toast-top-full-width > div,\n#igho-toast-container.toast-bottom-full-width > div {\n    width: 96%;\n    margin-left: auto;\n    margin-right: auto;\n}\n.toast {\n    background-color: #030303;\n}\n.success {\n    color: #155724 !important;\n    background-color: #d4edda;\n    border-color: #c3e6cb;\n}\n.alert {\n    color: #383d41 !important;\n    background-color: #e2e3e5;\n    border-color: #d6d8db;\n}\n.error {\n    background-color: #BD362F;\n}\n.info {\n    color: #0c5460 !important;\n    background-color: #d1ecf1;\n    border-color: #bee5eb;\n}\n.warning {\n     color: #856404 !important;\n    background-color: #fff3cd;\n    border-color: #ffeeba;\n}\n.toast-progress {\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    height: 4px;\n    background-color: #000000;\n    opacity: 0.4;\n    -ms-filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=40);\n    filter: alpha(opacity=40);\n}\n/*Responsive Design*/\n@media all and (max-width: 240px) {\n    #igho-toast-container > div {\n        padding: 8px 8px 8px 50px;\n        width: 11em;\n    }\n    #igho-toast-container > div.rtl {\n        padding: 8px 50px 8px 8px;\n    }\n    #igho-toast-container .toast-close-button {\n        right: -0.2em;\n        top: -0.2em;\n    }\n    #igho-toast-container .rtl .toast-close-button {\n        left: -0.2em;\n        right: 0.2em;\n    }\n}\n@media all and (min-width: 241px) and (max-width: 480px) {\n    #igho-toast-container > div {\n        padding: 8px 8px 8px 50px;\n        width: 18em;\n    }\n    #igho-toast-container > div.rtl {\n        padding: 8px 50px 8px 8px;\n    }\n    #igho-toast-container .toast-close-button {\n        right: -0.2em;\n        top: -0.2em;\n    }\n    #igho-toast-container .rtl .toast-close-button {\n        left: -0.2em;\n        right: 0.2em;\n    }\n}\n@media all and (min-width: 481px) and (max-width: 768px) {\n    #igho-toast-container > div {\n        padding: 15px 15px 15px 50px;\n        width: 25em;\n    }\n    #igho-toast-container > div.rtl {\n        padding: 15px 50px 15px 15px;\n    }\n}\n  ',document.head.appendChild(s);function p(t){var n=t.toastElement,e=t.options;n.style.display="none",function(t){var n=.1;t.style.display="block";var e=setInterval((function(){n>=1&&clearInterval(e),t.style.opacity="".concat(n),t.style.filter="alpha(opacity="+100*n+")",n+=.1*n}),10)}(n),e.timeOut>0&&setTimeout((function(){var t,e,o;t=n,e=1,o=setInterval((function(){e<=.1&&(clearInterval(o),t.style.display="none"),t.style.opacity="".concat(e),t.style.filter="alpha(opacity="+100*e+")",e-=.1*e}),50)}),e.timeOut)}function c(t,n){t||(t=i({},o));var e=document.getElementById(t.containerId);return e||(n&&(e=function(t){var n=document.createElement("div"),e=document.createAttribute("id");e.value=t.containerId;var o=document.createAttribute("class");return o.value=t.position,n.setAttributeNode(e),n.setAttributeNode(o),document.body.appendChild(n),n}(t)),e)}var l={show:function(t){var n=i({},o,{},t),e=t.type||n.iconClass,r=c(n,!0),a=document.createElement("div"),s=document.createElement("div"),l=document.createElement("div");if(e){var d=document.createAttribute("class");d.value=n.titleClass,a.setAttributeNode(d),a.classList.add(n.toastClass),a.classList.add(e)}return function(t){var n=t.toastObj,e=t.titleElement,o=t.toastElement,r=t.options;if(n.title){var i=n.title,a=document.createAttribute("class");a.value=r.titleClass,e.setAttributeNode(a),e.innerHTML=i.toString(),o.appendChild(e)}}({toastObj:t,titleElement:s,toastElement:a,options:n}),function(t){var n=t.toastObj,e=t.messageElement,o=t.toastElement,r=t.options;if(n.message){var i=document.createAttribute("class");i.value=r.messageClass,e.setAttributeNode(i),e.innerHTML=n.message,o.appendChild(e)}}({toastObj:t,messageElement:l,toastElement:a,options:n}),function(t){var n=t.options,e=t.toastElement,o=t.container;n.newestOnTop?o.prepend(e):o.appendChild(e)}({container:r,toastElement:a,options:n}),p({toastElement:a,options:n}),"Displaying: ".concat(t.message)}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,